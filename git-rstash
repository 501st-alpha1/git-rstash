#!/bin/bash

function usage() {
  echo 'usage: git rstash push <stash> [<remote>]'
  echo '   or: git rstash fetch [<remote>]'
  echo '   or: git rstash drop <stash> [<remote>]'
  echo '   or: git rstash import <SHA>'
  echo '   or: git rstash push-all [<remote>]'
  echo '   or: git rstash import-all'
}

function push() {
  [ -z "$1" ] && echo 'Error: please specify a stash number to push.' && exit 2
  remote=origin
  [ -z "$2" ] || remote="$2"

  echo "Pushing stash $1 to $remote."

  git push $remote stash@{$1}:refs/stashes/$(git rev-parse --short stash@{$1})
}

function fetch() {
  remote=origin
  [ -z "$1" ] || remote="$1"

  git fetch "$remote" refs/stashes/*:refs/stashes/*
}

function drop() {
  remote=origin
  [ -z "$1" ] && echo 'Error: please specify a stash number to drop.' && exit 3
  stashNum="$1"
  shift
  [ -z "$1" ] || remote="$1"
  stashCommit=$(git rev-parse --short stash@{$stashNum})

  read -p "Really delete stash $stashNum (commit $stashCommit) from $remote? " answer
  if [ "$answer" == 'y' ]
  then
    git push $remote :refs/stashes/$stashCommit
  fi
}

function import() {
  SHA=''
  if [ -z "$1" ]
  then
    echo 'Error: please specify a SHA to import as a stash.'
    exit 4
  else
    SHA="$1"
  fi

  # Start at 1 because Git won't save if duplicate of stash 0.
  for i in $(seq 1 $(expr $(git rev-list --walk-reflogs --count stash) - 1))
  do
    # If commit matches existing stash, abort early.
    diff <(git rev-parse stash@{$i}) <(echo $SHA) >/dev/null && return 0
  done

  git stash store --message "$(git show --no-patch --format=format:%s $SHA)" $SHA
}

function push-all() {
  remote=origin
  [ -z "$1" ] || remote="$1"

  for i in $(seq 0 $(expr $(git rev-list --walk-reflogs --count stash) - 1))
  do
    push $i "$remote"
  done
}

function import-all() {
  if [ ! -d .git/refs/stashes ]
  then
    echo 'Error: no stashes fetched or not in a Git repo.'
  fi

  for stash in $(ls .git/refs/stashes)
  do
    import "$stash"
  done
}

case "$1" in
  push|push-all|fetch|import|import-all)
    "$@"
    ;;
  drop|remove|delete)
    shift
    drop "$@"
    ;;
  -h)
    usage
    exit 0
    ;;
  *)
    usage
    exit 1
    ;;
esac
